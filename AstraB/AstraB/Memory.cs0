using System.Text;

public class Memory
{
    public MemoryLogger logger = new();
    
    private byte[] bytes;

    public Memory(int sizeInBytes)
    {
        bytes = new byte[sizeInBytes];
    }

    public void Write(int address, byte[] value)
    {
        byte[] before = new byte[value.Length];
        for (int i = 0; i < value.Length; i++)
        {
            before[i] = bytes[address + i];
            bytes[address + i] = value[i];
        }
        
        logger.LogWrite(address, before, value);
    }

    public void WriteInt(int address, int value)
    {
        Write(address, BitConverter.GetBytes(value));
    }

    public int ReadInt(int address)
    {
        return BitConverter.ToInt32(bytes, address);
    }
    
    public void Copy(int sourceAddress, int destinationAddress, int sizeInBytes)
    {
        for (int i = 0; i < sizeInBytes; i++)
        {
            bytes[destinationAddress + i] = bytes[sourceAddress + i];
        }
    }
}

public class MemoryLogger
{
    public StringBuilder b = new();
    
    public void LogWrite(int address, byte[] before, byte[] after)
    {
        b.AppendLine($"{address}: 0x{BitConverter.ToString(before)} => 0x{BitConverter.ToString(after)}");
    }

    public override string ToString()
    {
        return b.ToString();
    }
}